$date
  Wed Nov  2 01:05:58 2022
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module n_input_gate_tb $end
$var reg 8 ! input[7:0] $end
$var reg 1 " output_and $end
$var reg 1 # output_or $end
$var reg 1 $ output_nand $end
$var reg 1 % output_nor $end
$var reg 1 & output_xor $end
$var reg 1 ' output_xnor $end
$scope module and_n $end
$var reg 8 ( input[7:0] $end
$var reg 1 ) output $end
$var reg 7 * data[6:0] $end
$scope module gate(0) $end
$scope module bit0 $end
$upscope $end
$upscope $end
$scope module gate(1) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(2) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(3) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(4) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(5) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(6) $end
$scope module bitx $end
$upscope $end
$upscope $end
$upscope $end
$scope module or_n $end
$var reg 8 + input[7:0] $end
$var reg 1 , output $end
$var reg 7 - data[6:0] $end
$scope module gate(0) $end
$scope module bit0 $end
$upscope $end
$upscope $end
$scope module gate(1) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(2) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(3) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(4) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(5) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(6) $end
$scope module bitx $end
$upscope $end
$upscope $end
$upscope $end
$scope module nand_n $end
$var reg 8 . input[7:0] $end
$var reg 1 / output $end
$var reg 7 0 data[6:0] $end
$scope module gate(0) $end
$scope module bit0 $end
$upscope $end
$upscope $end
$scope module gate(1) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(2) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(3) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(4) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(5) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(6) $end
$scope module bitx $end
$upscope $end
$upscope $end
$upscope $end
$scope module nor_n $end
$var reg 8 1 input[7:0] $end
$var reg 1 2 output $end
$var reg 7 3 data[6:0] $end
$scope module gate(0) $end
$scope module bit0 $end
$upscope $end
$upscope $end
$scope module gate(1) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(2) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(3) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(4) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(5) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(6) $end
$scope module bitx $end
$upscope $end
$upscope $end
$upscope $end
$scope module xor_n $end
$var reg 8 4 input[7:0] $end
$var reg 1 5 output $end
$var reg 7 6 data[6:0] $end
$scope module gate(0) $end
$scope module bit0 $end
$upscope $end
$upscope $end
$scope module gate(1) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(2) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(3) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(4) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(5) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(6) $end
$scope module bitx $end
$upscope $end
$upscope $end
$upscope $end
$scope module xnor_n $end
$var reg 8 7 input[7:0] $end
$var reg 1 8 output $end
$var reg 7 9 data[6:0] $end
$scope module gate(0) $end
$scope module bit0 $end
$upscope $end
$upscope $end
$scope module gate(1) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(2) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(3) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(4) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(5) $end
$scope module bitx $end
$upscope $end
$upscope $end
$scope module gate(6) $end
$scope module bitx $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b00000000 !
0"
0#
1$
1%
0&
1'
b00000000 (
0)
b0000000 *
b00000000 +
0,
b0000000 -
b00000000 .
1/
b1111111 0
b00000000 1
12
b1111111 3
b00000000 4
05
b0000000 6
b00000000 7
18
b1010101 9
#10000000
b11111111 !
1"
1#
0$
0%
0&
1'
b11111111 (
1)
b1111111 *
b11111111 +
1,
b1111111 -
b11111111 .
0/
b0000000 0
b11111111 1
02
b0000000 3
b11111111 4
05
b0101010 6
b11111111 7
18
b1111111 9
#20000000
b00000001 !
0"
1$
1&
0'
b00000001 (
0)
b0000000 *
b00000001 +
b00000001 .
1/
b1111111 0
b00000001 1
b00000001 4
15
b1111111 6
b00000001 7
08
b0101010 9
#30000000
b10000000 !
1&
0'
b10000000 (
b10000000 +
b1000000 -
b10000000 .
b10000000 1
b0111111 3
b10000000 4
15
b1000000 6
b10000000 7
08
b0010101 9
#40000000
b01111111 !
1#
0%
1&
0'
b01111111 (
b0111111 *
b01111111 +
1,
b1111111 -
b01111111 .
b1000000 0
b01111111 1
02
b0000000 3
b01111111 4
15
b1101010 6
b01111111 7
08
b0111111 9
#50000000
b11110111 !
0"
1$
1&
0'
b11110111 (
0)
b0000011 *
b11110111 +
b11110111 .
1/
b1111100 0
b11110111 1
b11110111 4
15
b1010110 6
b11110111 7
08
b0000011 9
#60000000
b10101010 !
0&
1'
b10101010 (
b0000000 *
b10101010 +
b10101010 .
b1111111 0
b10101010 1
b10101010 4
05
b0110011 6
b10101010 7
18
b1100110 9
#70000000
b11100000 !
1&
0'
b11100000 (
b11100000 +
b1110000 -
b11100000 .
b11100000 1
b0001111 3
b11100000 4
15
b1010000 6
b11100000 7
08
b0000101 9
#80000000
